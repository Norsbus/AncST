import os
import pathlib

code_dir = config['code_dir']

work_dir = config['work_dir']

root = config['root_dir']

# env variable
os.environ['TMPDIR'] = f'{root}/utils/tmp'

envvars:
    "TMPDIR"

with open(f"{work_dir}/params","r") as f:
    line = f.read()
    params = line.split()
    K,E,L,I,P = params[:5]

# organisms to comput for
orgs = []
with open(f"{work_dir}/orgs","r") as f:
    for line in f:
        org = line.strip()
        orgs.append(org)

orgs_tuples = []
for i,org1 in enumerate(orgs):
    for org2 in orgs[i+1:]:
        orgs_tuples.append(org1+'---'+org2)

# snakerules
rule all:
	input:
            expand(f"{work_dir}/touch/deal_with_inconsistencies_done_{{org}}",org=orgs)

rule collect_output:
    output:
            f"{work_dir}/touch/collect_output_done_{{org}}"
    log: 
            err = f"{work_dir}/logs/collect_output_{{org}}/err",
            out = f"{work_dir}/logs/collect_output_{{org}}/out"
    resources:
            mem_mb=64000
    conda:
            "snakemake"
    shell: 
            f'{code_dir}/collect_output.py {{wildcards.org}} 1> {{log.out}} 2> {{log.err}} {work_dir} && touch {work_dir}/touch/collect_output_done_{{wildcards.org}}'

rule inconsistencies:
    input:
            expand(f"{work_dir}/touch/collect_output_done_{{org}}",org=orgs)
    output:
            f"{work_dir}/touch/deal_with_inconsistencies_done_{{org}}"
    log: 
            err = f"{work_dir}/logs/inconsistencies_{{org}}/err",
            out = f"{work_dir}/logs/inconsistencies_{{org}}/out"
    resources:
            mem_mb=64000
    conda:
            "snakemake"
    shell: 
            f'{code_dir}/inconsistencies.py {{wildcards.org}} 1> {{log.out}} 2> {{log.err}} {work_dir} && touch {work_dir}/touch/deal_with_inconsistencies_done_{{wildcards.org}}'
